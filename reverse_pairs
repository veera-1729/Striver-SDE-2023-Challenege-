import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution 
{
    public static int reversePairs(ArrayList<Integer> arr) 
    {
        int[] temp = new int[arr.size()];
        int[] ar = new int[arr.size()];
        int i = 0;
        for(int v : arr)
            ar[i++] = v;
        return mergeSort(ar, 0, ar.length-1, temp);
    }
    public static int mergeSort(int arr[] , int left , int right , int[] temp)
    {
        int invCount = 0;
        if(left < right)
        {
            int mid = (left + right)/2;
            invCount += mergeSort(arr , left , mid , temp);
            invCount += mergeSort(arr , mid+1 , right , temp);

            invCount += merge(arr,left,mid,right,temp);
        }
        return invCount;
    }
    public static int merge(int[] arr , int left , int mid , int right , int[] temp)
    {
        int invCount = 0 , v1 = mid+1;
        
        //counting the reverse pairs
        for(int v = left ; v <= mid ; v++)
        {
            while(v1 <= right && arr[v] > 2*arr[v1] )
                v1++;
            invCount += (v1 -(mid+1));
        }
        
        //merging the array
        int i = left , j = mid+1 , k = left;
        while(i <= mid && j <= right)
        {
            if(arr[i] <= arr[j])
            {
                temp[k++] = arr[i++];
            }
            else
            {
                temp[k++] = arr[j++];
            }
        }
        while(i <= mid)
            temp[k++] = arr[i++];
        while(j <= right)
            temp[k++] = arr[j++];
        //updating the sorted temp array into main array
        for(int v = left ; v <= right ; v++)
            arr[v] = temp[v];
        return invCount;
    }
}
